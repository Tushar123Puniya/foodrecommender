# -*- coding: utf-8 -*-
"""Recommendation_merged model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1q81-q8tZ6p5Tr7mx2Ih_KRvBJ-zzWCji
"""
import pandas as pd
import numpy as np
from sklearn.preprocessing import OneHotEncoder
import streamlit as st
from streamlit_gsheets import GSheetsConnection

def modify(df,mappings):
    matrix=[]

    attributes = ['Age','Weight','taste preference','ethnicity','Gender','location','disease','Height','Activity type','Goal']
    for i, row in df.iterrows():
        new_row = []
        for col in attributes:
            try:
              one_hot_vector = mappings[col][df[col][i]]
            except:
              print(f'Getting nan in {col} in {i} ith row')
              break
            new_row.extend(one_hot_vector)
        matrix.append(new_row)
    return matrix

def get_food_item(df,features):
  activity_mappings={
    1:1.2,       # Sedentary (little or no exercise)
    2:1.375,     # Lightly active (light exercise/sports 1-3 days a week)
    3:1.55,      # Moderately active (moderate exercise/sports 3-5 days a week)
    4:1.725,     # Very active (hard exercise/sports 6-7 days a week)
    5:1.9        # Extra active (very hard exercise/sports & physical job or training twice a day
  }
  weight = features['Weight']
  height = features['Height']
  age = features['Age']
  gender = features['Gender']
  activity = features['Activity type']
  height = height/100
  bmi = weight/(height**2)
  bmr = 0

  if gender == 'Male':
    bmr = 88.362 + (13.397 * weight) + (4.799 * height*100) - (5.677 * age)
  else:
    bmr = 447.593 + (9.247 * weight) + (3.098 * height*100) - (4.330 * age)

  w = activity_mappings[activity]

  caloriy_need = w*bmr
  caloriy_need /= 3
  
  if features['Goal']=='Gain':
    caloriy_need += 100
  elif features['Goal']=='Lose':
    caloriy_need -= 100
  print(caloriy_need)
  df_diff = df.copy()
  df_diff['Difference'] = abs(df_diff['Cals_per100grams'] - caloriy_need)
  df_diff_sorted = df_diff.sort_values(by='Difference')
  selected_items = df_diff_sorted.head(20)


  food = selected_items['Product'].tolist()
  return food

def recommendation(features):
  
  # Create a connection object.
  conn = st.connection("gsheets", type=GSheetsConnection)
  df = conn.read(worksheet = "Food")
  # df = pd.read_csv('data\Food.csv')
  df['Cals_per100grams'] = df['Cals_per100grams']*2.25    #This is done assuming a single plate contains 200-250 gm food.
  possible_values = {
    'taste preference': ['sweet','sour','salty','bitter','savory','Not Selected'],
    'ethnicity': ['Chinese','Malays','Malayapura','Arab','Bumiputera','Malay','Negrito','Bhumi malayu','Batak','Iban','Indian','Indonesian','Tamils','Bugis','Javanese','Kedahan malays','Thai','Not Selected'],
    'Gender': ['Male','Female'],
    'location':['Johor','Kedah','Kelantan','Malacca','Negeri Sembilan','Pahang','Penang','Perak','Perlis','Sabah','Sarawak','Selangor','Terengganu','Not Selected'],
    'disease':['Diabetes','High Blood Pressure','Low Blood Pressure','Hyper Tension','No Disease','Not Selected'],
    'Goal':['Gain','Lose','Maintain'],
    'Age': np.arange(15, 76).tolist(),
    'Weight':np.arange(45,110).tolist(),
    'Height':np.arange(160,191).tolist(),
    'Activity type': np.arange(1,6).tolist()
  }

  # Perform one-hot encoding for each categorical variable
  mappings = {}
  
  food = get_food_item(df,features)

  for key, values in possible_values.items():
      encoded_dict = {}
      encoded_array = []
      for x in values:
        encoded_array.append([x])
      encoded_array = np.array(encoded_array)
      encoder = OneHotEncoder(sparse_output = False)
      one_hot_encoded_data = encoder.fit_transform(encoded_array)
      for value,vector in zip(values,one_hot_encoded_data):
          encoded_dict[value] = vector
      mappings[key] = encoded_dict
    
  epsilon = 0.00005                                         # This is a parameter that is used to avoid divison by zero
  k = st.session_state['number_of_items']                   # This is used to determine how many items we want to recommend
  conn = st.connection("gsheets", type=GSheetsConnection)
  df2 = conn.read(worksheet = "Ratings")
  df2 = df2.head(1995)
  # df = pd.read_csv('data\data.csv')
  matrix = modify(df2,mappings)
  feature = list(features.values())
  for x in feature:
    print(x)
  u=[]
  attributes = ['Age','Weight','Gender','Height','Activity type','Goal','ethnicity','taste preference','disease','location']
    
  for x,y in zip(attributes,feature):
    u.extend(mappings[x][y])
    
  feature = np.array(u)
  feature = np.array(feature)
  cosine_similarites = np.dot(matrix,feature)
  matrix_norms = np.linalg.norm(matrix, axis=1)
  features_norm = np.linalg.norm(feature)
  cosine_similarites = cosine_similarites / (matrix_norms * features_norm)
  cosine_similarites = cosine_similarites/(np.sum(cosine_similarites)+epsilon)
  food_data = df2.loc[:,food]
  rating_matrix = food_data.values
  rating_matrix = rating_matrix.T
  ratted = np.dot(rating_matrix,cosine_similarites)
  top_items_index = np.argsort(ratted)[-k:]
  top_items = [food[i] for i in top_items_index]
  return top_items

# features={}

# for x in attributes:
#   if x=='Activity type':
#     print('''Please choose the one which best describes your activites of the week from below :
#         1.Sedentary (little or no exercise)
#         2.Lightly active (light exercise/sports 1-3 days a week)
#         3.Moderately active (moderate exercise/sports 3-5 days a week)
#         4.Very active (hard exercise/sports 6-7 days a week)
#         5.Extra active (very hard exercise/sports & physical job or training twice a day
#     ''')
#     s=input()
#     features['Activity type']=int(s)

#   elif x=='Goal':
#     print('''Please choose your goal :
#         1.Gain Weight
#         2.Lose Weight
#         3.Maintain
#     ''')
#     s= input()
#     features['Goal']=s

#   else:
#     print(f'Please enter your {x}: ')
#     s=input()
#     if not (x=='Age' or x=='Weight' or x=='Height'):
#       s = mappings[x][s]
#     else :
#       s = int(s)
#     features[x]=s

# features={
#     'Age':25,
#     'Weight':104,
#     'Gender':'Male',
#     'Height':170,
#     'Activity type':2,
#     'Goal':'Lose',
#     'ethnicity':'Not Selected',
#     'taste preference':'sour',
#     'disease':'Diabetes',
#     'location':'Malacca',
# }

# outputs = recommendation(features)

# print('Your recommended meals are: ')
# for x in outputs:
#   print(x,end='   ,')

